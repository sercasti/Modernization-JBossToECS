AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a load balanced web application onto ECS.

Parameters:
  MasterStackName:
    Type: String
  LaunchType:
    Type: String
  AppName:
    Type: String
  ContainerImage:
    Type: String
  ContainerPort:
    Type: Number
  RulePath:
    Type: String
  TaskCPU:
    Type: String
  TaskMemory:
    Type: String
  TaskCount:
    Type: Number
  GMSAName:
    Type: String
  CredSpecBucket:
    Type: String
  CredSpecKey:
    Type: String
  LogRetention:
    Type: Number
  HealthCheckPath:
    Type: String
  TaskLogDriver:
    Type: String
  MultipleDests:
    Type: String
  SingleDestName:
    Type: String
  IncludePattern:
    Type: String
  LogGrpName:
    Type: String
  LogStrmName:
    Type: String
  AutoCrtGrp:
    Type: String
  FirehoseStream:
    Type: String
  KinesisStream:
    Type: String
  KinesisAppendNewline:
    Type: String
  FirelensName:
    Type: String
  FirelensImage:
    Type: String
  ConfigType:
    Type: String
  ConfigPath:
    Type: String
  UsingCloudwatchLogs:
    Type: String
  UsingFirehoseLogs:
    Type: String
  UsingKinesisLogs:
    Type: String

  HealthCheckIntervalSeconds:
    Type: Number
  HealthyThresholdCount:
    Type: Number
  HealthCheckTimeoutSeconds:
    Type: Number

  VpcId:
    Type: String
  PublicSubnets:
    Type: String
  ServiceDiscoveryNamespaceID:
    Type: String
  EnvironmentSecurityGroup:
    Type: String
  PublicLoadBalancerDNSName:
    Type: String
  PublicLoadBalancerHostedZone:
    Type: String
  HTTPListenerArn:
    Type: String
  HTTPSListenerArn:
    Type: String
  ClusterId:
    Type: String

  # Special Purpose Lambda Functions
  RulePriorityLambda:
    Type: String

Conditions:
  HTTPLoadBalancer:
    !Not
    - !Condition HTTPSLoadBalancer
  HTTPSLoadBalancer:
    !Not [!Equals [!Ref HTTPSListenerArn, ""]]
  HTTPRootPath: # If we're using path based routing and use the root path, we have some special logic
    !Or [!Equals [!Ref RulePath, ""], !Equals [!Ref RulePath, "/"]]
  EC2LaunchType:
    !Equals [ !Ref LaunchType, "EC2" ]
  UseGMSA:
    !Not [!Equals [!Ref GMSAName, "" ]]
  UseExecutionRole:
    !Or [!Not [!Condition EC2LaunchType], !Condition UseGMSA]
  UseCloudwatchLogDriver:
    !Equals [ !Ref TaskLogDriver, "awslogs" ]
  UseFirelensLogDriver:
    !Equals [ !Ref TaskLogDriver, "awsfirelens" ]
  UsingLogging:
    !Or
    - !Condition UseCloudwatchLogDriver
    - !Condition UseFirelensLogDriver
  UseFirelensCloudwatch:
    !Equals [ !Ref UsingCloudwatchLogs, true]
  UseFirelensFirehose:
    !Equals [ !Ref UsingFirehoseLogs, true]
  UseFirelensKinesis:
    !Equals [ !Ref UsingKinesisLogs, true]
  UseMultipleDests:
    !And
    - !Condition UseFirelensLogDriver
    - !Equals [ !Ref MultipleDests, true]
  UseSingleDest:
    !And
    - !Condition UseFirelensLogDriver
    - !Not [!Condition UseMultipleDests]
  UsingFirelensSingleCloudwatch:
    !And
    - !Condition UseSingleDest
    - !Condition UseFirelensCloudwatch
  UsingFirelensSingleFirehose:
    !And
    - !Condition UseSingleDest
    - !Condition UseFirelensFirehose
  UsingFirelensSingleKinesis:
    !And
    - !Condition UseSingleDest
    - !Condition UseFirelensKinesis
  
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref MasterStackName, '-', !Ref AppName]]
      RetentionInDays: !Ref LogRetention

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Join ['', [!Ref MasterStackName, '-', !Ref AppName]]
      NetworkMode: !If [ EC2LaunchType, !Ref "AWS::NoValue", awsvpc ] # Set to awsvpc for Fargate LaunchType, leave default for EC2 LaunchType
      RequiresCompatibilities:
        - !Ref LaunchType
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !If [ UseExecutionRole, !Ref ExecutionRole, !Ref "AWS::NoValue" ] # Set task execution role if Fargate LaunchType or gMSA, otherwise leave empty
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # We pipe certain environment variables directly into the task definition.
          # This lets customers have access to, for example, their LB endpoint - which they'd
          # have no way of otherwise determining.
          Environment:
            - Name: ECS_APP_DISCOVERY_ENDPOINT
              Value: !Sub ${MasterStackName}.local
            - Name: APP_NAME
              Value: !Sub '${AppName}'
            - Name: ECS_LB_DNS
              Value: !Ref PublicLoadBalancerDNSName
          LogConfiguration: 
            !If
            - UsingLogging
            - 
              LogDriver: !Ref TaskLogDriver
              Options:
                awslogs-region: !If [ UseCloudwatchLogDriver, !Ref "AWS::Region", !Ref "AWS::NoValue"]
                awslogs-group: !If [ UseCloudwatchLogDriver, !Ref LogGroup, !Ref "AWS::NoValue"]
                awslogs-stream-prefix: !If [ UseCloudwatchLogDriver, "ecs", !Ref "AWS::NoValue"]
                Name: !If [ UseSingleDest, !Ref SingleDestName, !Ref "AWS::NoValue"]
                Region: !If [ UseSingleDest, !Ref "AWS::Region", !Ref "AWS::NoValue"]
                include-pattern: !If [ UseSingleDest, !Ref IncludePattern, !Ref "AWS::NoValue"]
                log_group_name: !If [ UsingFirelensSingleCloudwatch, !Ref LogGrpName, !Ref "AWS::NoValue"]
                log_stream_name: !If [ UsingFirelensSingleCloudwatch, !Ref LogStrmName, !Ref "AWS::NoValue"]
                auto_create_group: !If [ UsingFirelensSingleCloudwatch, !Ref AutoCrtGrp, !Ref "AWS::NoValue"]
                delivery_stream: !If [ UsingFirelensSingleFirehose, !Ref FirehoseStream, !Ref "AWS::NoValue"]
                stream: !If [ UsingFirelensSingleKinesis, !Ref KinesisStream, !Ref "AWS::NoValue"]
                append_newline: !If [ UsingFirelensSingleKinesis, !Ref KinesisAppendNewline, !Ref "AWS::NoValue"]
            - !Ref "AWS::NoValue"
          DockerSecurityOptions:
            !If
            - UseGMSA
            - !Split [ ',', !Sub 'credentialspec:arn:aws:s3:::${CredSpecBucket}/${CredSpecKey}' ]
            - !Ref AWS::NoValue
        - !If
          - UseFirelensLogDriver
          -
            Name: !Ref FirelensName
            Image: !Ref FirelensImage
            Essential: true
            User: '0'
            MemoryReservation: 50
            FirelensConfiguration:
              Type: 'fluentbit'
              Options:
                !If
                - UseMultipleDests
                -
                  config-file-type: !Ref ConfigType
                  config-file-value: !Ref ConfigPath
                - !Ref "AWS::NoValue"
            LogConfiguration:
              LogDriver: 'awslogs'
              Options:
                awslogs-region: !Ref "AWS::Region"
                awslogs-group: !Ref LogGroup
                awslogs-stream-prefix: 'firelens'
          - !Ref "AWS::NoValue"

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join ['', [!Ref MasterStackName, '-', !Ref AppName, SecretsPolicy]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParameters'
                  - 'secretsmanager:GetSecretValue'
                  - 'kms:Decrypt'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
                  - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
        - !If
          - UseGMSA
          -
            PolicyName: !Join ['', [!Ref AppName, S3Policy]]
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                  - 's3:Get*'
                  - 's3:List*'
                  Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${CredSpecBucket}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${CredSpecBucket}/${CredSpecKey}'
          - !Ref AWS::NoValue
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'DenyIAMExceptTaggedRoles'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Deny'
                Action: 'iam:*'
                Resource: '*'
              - Effect: 'Allow'
                Action: 'sts:AssumeRole'
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
                Condition:
                  StringEquals:
                    'iam:ResourceTag/ecs-environment': !Sub '${MasterStackName}'
        - PolicyName: 'AllowPrefixedResources'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: '*'
                Resource:
                  - !Sub 'arn:aws:s3:::${MasterStackName}-*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:*/${MasterStackName}-*'
                  - !Sub 'arn:aws:elasticache:${AWS::Region}:${AWS::AccountId}:*/${MasterStackName}-*'
                  - !Sub 'arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:*:${MasterStackName}-*'
                  - !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:*:${MasterStackName}-*'
                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:*/${MasterStackName}-*'

                  - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${MasterStackName}-*'
                  - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${MasterStackName}-*'
                  - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:*/${MasterStackName}-*'
                  - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:*/${MasterStackName}-*'
                  - !Sub 'arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:*/${MasterStackName}-*'
        - PolicyName: 'AllowTaggedResources' # See https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: '*'
                Resource: '*'
                Condition:
                  StringEquals:
                    'aws:ResourceTag/ecs-environment': !Sub '${MasterStackName}'
              - Effect: 'Allow'
                Action: '*'
                Resource: '*'
                Condition:
                  StringEquals:
                    'secretsmanager:ResourceTag/ecs-environment': !Sub '${MasterStackName}'
        - PolicyName: 'CloudWatchMetricsAndDashboard'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'cloudwatch:GetDashboard'
                  - 'cloudwatch:ListDashboards'
                  - 'cloudwatch:PutDashboard'
                  - 'cloudwatch:ListMetrics'
                Resource: '*'
        - !If
          - UseFirelensCloudwatch
          -
            PolicyName: 'FirelensCloudwatchLoggingActions'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: '*'
          - !Ref "AWS::NoValue"
        - !If
          - UseFirelensFirehose
          -
            PolicyName: 'FirelensFirehoseLoggingActions'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'firehose:PutRecordBatch'
                  Resource: '*'
          - !Ref "AWS::NoValue"
        - !If
          - UseFirelensKinesis
          -
            PolicyName: 'FirelensKinesisLoggingActions'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'kinesis:PutRecord'
                    - 'kinesis:PutRecords'
                  Resource: '*'
          - !Ref "AWS::NoValue"
  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for this application
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: SRV
          - !If
            - EC2LaunchType
            - !Ref AWS::NoValue
            -
              TTL: 60
              Type: A
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name:  !Ref AppName
      NamespaceId: !Ref ServiceDiscoveryNamespaceID

  Service:
    Type: AWS::ECS::Service
    DependsOn: WaitUntilListenerRuleIsCreated
    Properties:
      Cluster: !Ref ClusterId
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref TaskCount
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 60
      LaunchType: !Ref LaunchType
      # No Network Configuration is set in service for EC2 LaunchType
      NetworkConfiguration:
        !If
        - EC2LaunchType
        - !Ref AWS::NoValue
        - AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets: !Split [ ',', !Ref PublicSubnets ]
            SecurityGroups:
              - !Ref EnvironmentSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref AppName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn
          # Uses Port for Fargate (awsvpc default NetworkMode), and combo of ContainerName and ContainerPort for EC2 Launch Type (bridge default NetworkMode).
          # See https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ServiceRegistry.html for more info and on
          # what combination of port, containerName, and containerPort must be used with which network mode/launch type
          Port: !If [ EC2LaunchType, !Ref "AWS::NoValue", !Ref ContainerPort ]
          ContainerName: !If [ EC2LaunchType, !Ref AppName, !Ref "AWS::NoValue" ]
          ContainerPort: !If [ EC2LaunchType, !Ref ContainerPort, !Ref "AWS::NoValue" ]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      #  Check if your application is healthy within 20 = 10*2 seconds, compared to 2.5 mins = 30*5 seconds.
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds # Default is 30.
      HealthyThresholdCount: !Ref HealthyThresholdCount       # Default is 5.
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds
      HealthCheckPath: !Ref HealthCheckPath
      Port: !If [EC2LaunchType, 80, !Ref ContainerPort ]
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60                  # Default is 300.
      TargetType: !If [ EC2LaunchType, instance, ip ]
      VpcId: !Ref VpcId

  RulePriorityFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Ref RulePriorityLambda
      Handler: "index.nextAvailableRulePriorityHandler"
      Timeout: 600
      MemorySize: 512
      Role: !GetAtt 'CustomResourceRole.Arn'
      Runtime: nodejs10.x

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "DNSandACMAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeRules
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HTTPSRulePriorityAction:
    Condition: HTTPSLoadBalancer
    Type: Custom::RulePriorityFunction
    Properties:
      ServiceToken: !GetAtt RulePriorityFunction.Arn
      ListenerArn: !Ref HTTPSListenerArn

  HTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HTTPSLoadBalancer
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              !If
              - HTTPRootPath
              -
                - "/*"
              -
                - !Sub "/${RulePath}"
                - !Sub "/${RulePath}/*"
      ListenerArn: !Ref HTTPSListenerArn
      Priority:
        !If
        - HTTPRootPath
        - 50000 # This is the max rule priority. Since this rule evaluates true for everything, we make sure it is last
        - !GetAtt HTTPSRulePriorityAction.Priority

  # Rule to forward HTTP to HTTPS
  HTTPSForwardRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HTTPSLoadBalancer
    Properties:
      Actions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              !If
              - HTTPRootPath
              - - "/*"
              - - !Sub "/${RulePath}"
                - !Sub "/${RulePath}/*"
      ListenerArn: !Ref HTTPListenerArn
      Priority:
        !If
        - HTTPRootPath
        - 50000 # This is the max rule priority. Since this rule evaluates true for everything, we make sure it is last
        - !GetAtt HTTPRulePriorityAction.Priority

  HTTPRulePriorityAction:
    Type: Custom::RulePriorityFunction
    Properties:
      ServiceToken: !GetAtt RulePriorityFunction.Arn
      ListenerArn: !Ref HTTPListenerArn

  HTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HTTPLoadBalancer
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              !If
              - HTTPRootPath
              -
                - "/*"
              -
                - !Sub "/${RulePath}"
                - !Sub "/${RulePath}/*"
      ListenerArn: !Ref HTTPListenerArn
      Priority:
        !If
        - HTTPRootPath
        - 50000 # This is the max rule priority. Since this rule evaluates true for everything, we make sure it is last
        - !GetAtt HTTPRulePriorityAction.Priority

  # Force a conditional dependency from the ECS service on the listener rules.
  # Our service depends on our HTTP/S listener to be set up before it can
  # be created. But, since our environment is either HTTPS or not, we
  # have a conditional dependency (we have to wait for the HTTPS listener
  # to be created or the HTTP listener to be created). In order to have a
  # conditional dependency, we use the WaitHandle resource as a way to force
  # a single dependency. The Ref in the WaitCondition implicitly creates a conditional
  # dependency - if the condition is satisfied (HTTPLoadBalancer) - the ref resolves
  # the HTTPWaitHandle, which depends on the HTTPListenerRule.

  HTTPSWaitHandle:
    Condition: HTTPSLoadBalancer
    DependsOn: HTTPSListenerRule
    Type: AWS::CloudFormation::WaitConditionHandle

  HTTPWaitHandle:
    Condition: HTTPLoadBalancer
    DependsOn: HTTPListenerRule
    Type: AWS::CloudFormation::WaitConditionHandle

  # We don't actually need to wait for the condition to
  # be completed, that's why we set a count of 0. The timeout
  # is a required field, but useless, so we set it to one.
  WaitUntilListenerRuleIsCreated:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [HTTPLoadBalancer, !Ref HTTPWaitHandle, !Ref HTTPSWaitHandle]
      Timeout: "1"
      Count: 0

Outputs:
  ECSService:
    Value: !GetAtt Service.Name
    Export:
      Name: !Sub '${MasterStackName}-ECSService'
