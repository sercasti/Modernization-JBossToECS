AWSTemplateFormatVersion: 2010-09-09
Description: Configure a new ECS Cluster for a Fargate or EC2 Launch Type.

Parameters:
  MasterStackName:
    Type: String
  LaunchType:
    Type: String
  PublicSubnets:
    Type: CommaDelimitedList
  EnvironmentSecurityGroup:
    Type: String

  # Parameters for the Application Load Balanced EC2 launch type
  MaxSize:
    Type: Number
  DesiredCapacity:
    Type: Number
  AmiId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
  KeyName:
    Type: String

# Parameters related to configuring GMSA
  ECSArtifactBucket:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Description: S3 bucket name for the ECS Configuration assets.
    Type: String
  DomainDNSName:
    Default: ""
    Description: Fully qualified domain name (FQDN).
    MaxLength: '255'
    Type: String
  DomainNetBIOSName:
    Default: EXAMPLE
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows.
    MaxLength: '15'
    Type: String
  GroupManagedServiceAccountName:
    Default: ""
    Description: The first group Managed Service Account used with the ECS Cluster, this will create and AD Group of the same name.
    MaxLength: '25'
    Type: String
  WriteMOFFunctionLambdaArn:
    Description: Role for Write MOF file.
    Default: ""
    Type: String
  DomainSecretsArn:
    Default: ""
    Description: "The Secrets Manager name or ARN that will be used to perform all need domain actions."
    Type: "String"

Conditions:
  EC2LaunchType:
    !Equals [ !Ref LaunchType, "EC2" ]
  AttachKeyPair:
    !Not [!Equals [!Ref KeyName, ""]]
  UseServiceAccount:
     !Not [!Equals [ !Ref GroupManagedServiceAccountName, "" ]]

Resources:
  WriteDomainJoinMOF:
    Condition: UseServiceAccount
    Type: Custom::WriteMOFFile
    Properties:
      ServiceToken: !Ref WriteMOFFunctionLambdaArn
      Bucket: !Ref ECSArtifactBucket
      Key: !Sub "MOFS/ECSHostSetup-${AWS::StackName}.mof"
      Body: !Sub |
        /*
        @TargetNode='localhost'
        */

        instance of MSFT_Credential as $MSFT_Credential1ref
        {
        Password = "QuickStart";
         UserName = "${DomainSecretsArn}";
        };

        instance of DSC_Computer as $DSC_Computer1ref
        {
        ResourceID = "[Computer]JoinDomain";
         Credential = $MSFT_Credential1ref;
         DomainName = "{tag:AD-Domain}";
         Name = "{tag:Name}";
         ModuleName = "ComputerManagementDsc";
         ModuleVersion = "8.0.0";
         ConfigurationName = "ECSHostGroupDomain";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource1ref
        {
        ResourceID = "[WindowsFeature]RSAT-AD-PowerShell";
         Ensure = "Present";
         Name = "RSAT-AD-PowerShell";
         ModuleName = "PSDesiredStateConfiguration";
        ModuleVersion = "1.0";
         ConfigurationName = "ECSHostGroupDomain";
        };
        instance of MSFT_Credential as $MSFT_Credential2ref
        {
        Password = "QuickStart";
         UserName = "${DomainSecretsArn}";
        };
        instance of MSFT_ADGroup as $MSFT_ADGroup1ref
        {
        ResourceID = "[ADGroup]ECSGroup";
         Credential = $MSFT_Credential2ref;
         Ensure = "Present";
         Category = "Security";
         MembersToInclude = {
            "{tag:ObjectName}"
        };
         GroupScope = "DomainLocal";
         GroupName = "{tag:gMSAGroup}";
         ModuleName = "ActiveDirectoryDsc";
         ModuleVersion = "6.0.1";
        DependsOn = {
            "[WindowsFeature]RSAT-AD-PowerShell"};
         ConfigurationName = "ECSHostGroupDomain";
        };
        instance of OMI_ConfigurationDocument
                            {
         Version="2.0.0";
                                MinimumCompatibleVersion = "1.0.0";
                                CompatibleVersionAdditionalProperties= {"Omi_BaseResource:ConfigurationName"};
                                Name="ECSHostGroupDomain";
                            };
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${MasterStackName}-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: EC2LaunchType
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnets
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      Tags:
        - Key: AD-Domain
          Value: !Ref DomainDNSName
          PropagateAtLaunch: true
        - Key: ECSWinCluster
          Value: !Ref Cluster
          PropagateAtLaunch: true
        - Key: gMSAGroup
          Value: !Ref GroupManagedServiceAccountName
          PropagateAtLaunch: true
    #CreationPolicy:
    #  ResourceSignal:
    #    Timeout: PT20M
    #UpdatePolicy:
    #  AutoScalingRollingUpdate:
    #    MinInstancesInService: '1'
    #    MaxBatchSize: '1'
    #    PauseTime: 'PT20M'
    #    WaitOnResourceSignals: 'true'

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: EC2LaunchType
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            c:\cfn\hook.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe --verbose --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\etc\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'AmiId'
      SecurityGroups: [!Ref 'EnvironmentSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !If [AttachKeyPair, !Ref KeyName, !Ref "AWS::NoValue"]
      AssociatePublicIpAddress: 'true'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub "cmd /C setx ECS_CLUSTER ${Cluster}"
            - "\n"
            - 'cmd /C setx ECS_ENABLE_TASK_IAM_ROLE true'
            - "\n"
            - '[Environment]::SetEnvironmentVariable("ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE", $TRUE, "Machine")'
            - "\n"
            - !Sub "cfn-init.exe --verbose --stack ${AWS::StackId} --resource ContainerInstances --region ${AWS::Region} --configsets default"
            - "\n"
            - !Sub "cfn-signal.exe --exit-code %ERRORLEVEL% --stack ${AWS::StackId} --resource ECSAutoScalingGroup --region ${AWS::Region}"
            - "\n"
            - 'Import-Module AWSPowerShell'
            - "\n"
            - 'Import-Module ECSTools'
            - "\n"
            - '$Nametag = New-Object Amazon.EC2.Model.Tag'
            - "\n"
            - '$Nametag.Key = "Name"'
            - "\n"
            - '$Nametag.Value = $env:COMPUTERNAME'
            - "\n"
            - '$Objecttag = New-Object Amazon.EC2.Model.Tag'
            - "\n"
            - '$Objecttag.Key = "ObjectName"'
            - "\n"
            - '$Objecttag.Value = $env:COMPUTERNAME + "$"'
            - "\n"
            - '$instanceid = (Invoke-RestMethod -Method Get -Uri http://169.254.169.254/latest/meta-data/instance-id)'
            - "\n"
            - 'New-EC2Tag -Resource $instanceid -Tag $Nametag, $Objecttag'
            - "\n"
            - !Sub "Initialize-ECSAgent -Cluster ${Cluster} -EnableTaskIAMRole -LoggingDrivers '[\"json-file\",\"awslogs\"]'"
            - "\n"
            - "</powershell>\n"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EC2LaunchType
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  # Role for the EC2 hosts. Allows the ECS agent on the EC2 hosts
  # to communicate with the ECS control plane, as well as download
  # docker images from ECR or CredSpec from S3 to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Condition: EC2LaunchType
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::aws-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*'
                  - !Sub 'arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*'
                Effect: Allow
          PolicyName: ssm-custom-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
          PolicyName: qs-tags-Policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${ECSArtifactBucket}/*'
                - !Sub 'arn:${AWS::Partition}:s3:::${ECSArtifactBucket}'
          PolicyName: write-mof-s3
        - !If
          - UseServiceAccount
          -
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                    - secretsmanager:DescribeSecret
                  Resource:
                    - !Ref 'DomainSecretsArn'
            PolicyName: get-domain-creds
          - !Ref AWS::NoValue
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
            - "ssm.amazonaws.com"
          Action: "sts:AssumeRole"

  ECSHostAssociation:
    Type: AWS::SSM::Association
    Condition: UseServiceAccount
    Properties:
      AssociationName: !Sub 'ECSHostSetup-${Cluster}'
      Name: AWS-ApplyDSCMofs
      Targets:
        - Key: "tag:ECSWinCluster"
          Values:
           - !Ref "Cluster"
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref ECSArtifactBucket
          OutputS3KeyPrefix: 'logs/'
      ScheduleExpression: "cron(30 23 * * ? *)"
      Parameters:
        MofsToApply:
          - !Sub "s3:${ECSArtifactBucket}:MOFS/ECSHostSetup-${AWS::StackName}.mof"
        ServicePath:
          - default
        MofOperationMode:
          - Apply
        ComplianceType:
          - Custom:ECSHostDomainJoin
        AllowPSGalleryModuleSource:
          - "True"
        RebootBehavior:
          - "AfterMof"
        UseComputerNameForReporting:
          - "False"
        EnableVerboseLogging:
          - "False"
        EnableDebugLogging:
          - "False"

Outputs:
  ClusterId:
    Value: !Ref Cluster
    Export:
      Name: !Sub '${MasterStackName}-ClusterId'
