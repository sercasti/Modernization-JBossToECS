AWSTemplateFormatVersion: '2010-09-09'
Description: This deploys an Automation Document that builds a .Net Framework Container that includes msbuild (qs-1qh1429dt)
Resources:
  GMSAConfigurationDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: "Configure gMSA Group, Account and generate CredSpec file to s3 or Systems Manager parameter store"
        assumeRole: "{{AutomationAssumeRole}}"
        parameters:
          CredSpecBucket:
            description: "S3 bucket where the CredSpec File will be saved."
            type: "String"
          DomainDNSName:
            description: "Domain DNS Name used to join Active Directory in order to perform gMSA configuration."
            type: "String"
          ServiceAccount:
            default: "gMSASample"
            description: "Name of the Service Account that will be created"
            type: "String"
          DomainSecretsArn:
            description: "The Secrets Manager name or ARN that represents domain credentials to perform all needed domain actions."
            type: "String"
          InstanceProfile:
            description: "Instance profile that has a role that allows EC2 Instance to grab secrets from Secrets Manager
               and interact with AWS Systems Manager"
            type: "String"
          SecurityGroupId:
            description: "Security Group that gives the ability to communicate with Active Directory"
            type: "String"
          SubnetId:
            description: "Subnet ID that give the ability to communicate to Active Directoy"
            type: "String"
          LatestAmi:
            type: String
            default: >-
              {{ssm:/aws/service/ami-windows-latest/Windows_Server-1909-English-Core-Base}}
            description: "The latest Windows Server 2019 Core AMI queried from the public parameter."
          StackName:
            default: ""
            description: "Stack Name Input for cfn resource signal"
            type: "String"
          AutomationAssumeRole:
            default: ""
            description: "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
            type: "String"
        mainSteps:
          - name: launchInstance
            action: aws:runInstances
            maxAttempts: 3
            timeoutSeconds: 1200
            onFailure: Abort
            inputs:
              ImageId: '{{LatestAmi}}'
              InstanceType: t3a.small
              MinInstanceCount: 1
              MaxInstanceCount: 1
              IamInstanceProfileName: "{{InstanceProfile}}"
              SecurityGroupIds:
                - "{{SecurityGroupId}}"
              SubnetId: "{{SubnetId}}"
              TagSpecifications:
              - ResourceType: instance
                Tags:
                - Key: Name
                  Value: gMSAConfig
                - Key: LaunchedBy
                  Value: SSMAutomation
                - Key: Category
                  Value: gMSASetup
          - name: "InstallDSCModules"
            action: aws:runCommand
            onFailure: "step:signalfailure"
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{launchInstance.InstanceIds}}"
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: "true"
                CloudWatchLogGroupName: "/gMSAConfigurator"
              Parameters:
                commands:
                  - |
                     "Setting up Powershell Gallery to Install DSC Modules"
                     Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5 -Force
                     Set-PSRepository -Name PSGallery -InstallationPolicy Trusted

                     "Installing the needed Powershell DSC modules for this Quick Start"
                     Install-Module -Name ActiveDirectoryDsc
                     Install-Module ComputerManagementDsc
                     Install-Module CredentialSpec
          - name: "LCMConfig"
            action: aws:runCommand
            onFailure: "step:signalfailure"
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{launchInstance.InstanceIds}}"
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: "true"
                CloudWatchLogGroupName: "/gMSAConfigurator"
              Parameters:
                commands:
                  - |
                      [DSCLocalConfigurationManager()]
                      configuration LCMConfig
                      {
                          Node 'localhost' {
                              Settings {
                                  RefreshMode = 'Push'
                                  ActionAfterReboot = 'StopConfiguration'
                                  RebootNodeIfNeeded = $false
                              }
                          }
                      }
                      #Generates MOF File for LCM
                      LCMConfig -OutputPath 'C:\AWSQuickstart\LCMConfig'

                      # Sets LCM Configuration to MOF generated in previous command
                      Set-DscLocalConfigurationManager -Path 'C:\AWSQuickstart\LCMConfig'
          - name: "gMSAConfigurator"
            action: aws:runCommand
            onFailure: "step:signalfailure"
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{launchInstance.InstanceIds}}"
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: "true"
                CloudWatchLogGroupName: "/gMSAConfigurator"
              Parameters:
                commands:
                  - |
                     [CmdletBinding()]
                     $ConfigurationData = @{
                         AllNodes = @(
                             @{
                                 NodeName="*"
                                 PSDscAllowPlainTextPassword = $true
                                 PSDscAllowDomainUser = $true
                             },
                             @{
                                 NodeName = 'localhost'
                             }
                         )
                     }

                     Configuration gMSASetup {

                         # Getting Password from Secrets Manager for AD User with permissions
                         $ADAdminPassword = ConvertFrom-Json -InputObject (Get-SECSecretValue -SecretId "{{DomainSecretsArn}}").SecretString
                         # Creating Credential Object for AD User
                         $Credentials = (New-Object PSCredential($ADAdminPassword.UserName,(ConvertTo-SecureString $ADAdminPassword.Password -AsPlainText -Force)))
                         $MachineName = $env:COMPUTERNAME

                         Import-Module -Name PSDesiredStateConfiguration
                         Import-Module -Name ComputerManagementDsc
                         Import-Module -Name ActiveDirectoryDsc

                         Import-DscResource -Module ActiveDirectoryDsc
                         Import-DscResource -Module PSDesiredStateConfiguration
                         Import-DscResource -Module ComputerManagementDsc

                         Node localhost {
                             Computer JoinDomain {
                                 Name = $MachineName
                                 DomainName = "{{DomainDNSName}}"
                                 Credential = $Credentials
                             }

                             WindowsFeature RSAT-AD-PowerShell {
                                 Name = 'RSAT-AD-PowerShell'
                                 Ensure = 'Present'
                             }

                             ADGroup 'gMSAGroup'{
                                 GroupName   = "{{ServiceAccount}}"
                                 GroupScope  = 'DomainLocal'
                                 Category    = 'Security'
                                 Ensure      = 'Present'
                                 MembersToInclude = $MachineName + "$"
                                 Credential = $Credentials
                                 DependsOn  = '[Computer]JoinDomain'
                             }

                             ADManagedServiceAccount 'gMSA' {
                                 Ensure                    = 'Present'
                                 ServiceAccountName        = "{{ServiceAccount}}"
                                 AccountType               = 'Group'
                                 ManagedPasswordPrincipals = "{{ServiceAccount}}"
                                 Credential = $Credentials
                                 DependsOn = "[ADGroup]gMSAGroup"
                             }

                             PendingReboot BeforeExchangeInstall {
                                 Name       = 'BeforeCredSpecSetup'
                                 DependsOn  = '[ADGroup]gMSAGroup'
                             }

                             Script 'S3CredSpec' {
                                 GetScript = {
                                     $S3key = "CredSpecs/" + "{{ServiceAccount}}" + '.json'
                                     Return @{Result = [string]$(Get-S3Object -BucketName "{{CredSpecBucket}}" -Key $S3key)}
                                 }
                                 TestScript = {
                                     $S3key = "CredSpecs/" + "{{ServiceAccount}}" + '.json'
                                     $S3CredSpec = Get-S3Object -BucketName "{{CredSpecBucket}}" -Key $S3key
                                     if($S3CredSpec.Key -ne $S3key) {
                                         Write-Verbose 'Service Account does not have a CredSpec on S3'
                                         Return $false
                                     } else {
                                         Write-Verbose 'Service Account has a CredSpec on S3'
                                         Return $true
                                     }
                                 }
                                 SetScript = {
                                     $S3key = "CredSpecs/" + "{{ServiceAccount}}" + '.json'
                                     $filepath = 'C:\AWSQuickstart\' + "{{ServiceAccount}}" +'.json'
                                     if((test-path $filepath) -eq $false) {
                                         New-CredentialSpec -AccountName "{{ServiceAccount}}" -Path $filepath
                                         Write-S3Object -BucketName "{{CredSpecBucket}}" -Key $S3key -File $filepath
                                     } else {
                                         Write-S3Object -BucketName "{{CredSpecBucket}}" -Key $S3key -File $filepath
                                     }
                                 }
                             }
                         }
                     }

                     gMSASetup -OutputPath 'C:\AWSQuickstart\gMSASetup' -ConfigurationData $ConfigurationData
          - name: "gMSAConfig"
            action: aws:runCommand
            onFailure: "step:signalfailure"
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{launchInstance.InstanceIds}}"
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: "true"
                CloudWatchLogGroupName: "/gMSAConfigurator"
              Parameters:
                commands:
                  - |
                     function DscStatusCheck () {
                         $LCMState = (Get-DscLocalConfigurationManager).LCMState
                         if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                             'returning 3010, should continue after reboot'
                             exit 3010
                         } else {
                           'Completed'
                         }
                     }

                     Start-DscConfiguration 'C:\AWSQuickstart\gMSASetup' -Wait -Verbose -Force

                     DscStatusCheck
          - name: "RemoveDomain"
            action: aws:runCommand
            onFailure: "step:signalfailure"
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{launchInstance.InstanceIds}}"
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: "true"
                CloudWatchLogGroupName: "/gMSAConfigurator"
              Parameters:
                commands:
                  - |
                     $ConfigurationData = @{
                         AllNodes = @(
                             @{
                                 NodeName="*"
                                 PSDscAllowPlainTextPassword = $true
                                 PSDscAllowDomainUser = $true
                             },
                             @{
                                 NodeName = 'localhost'
                             }
                         )
                     }


                     Configuration RemoveDomain {

                         # Getting Password from Secrets Manager for AD User with permissions
                         $ADAdminPassword = ConvertFrom-Json -InputObject (Get-SECSecretValue -SecretId "{{DomainSecretsArn}}").SecretString
                         # Creating Credential Object for AD User
                         $Credentials = (New-Object PSCredential($ADAdminPassword.UserName,(ConvertTo-SecureString $ADAdminPassword.Password -AsPlainText -Force)))
                         $MachineName = $env:COMPUTERNAME

                         Import-Module -Name PSDesiredStateConfiguration
                         Import-Module -Name ComputerManagementDsc
                         Import-Module -Name ActiveDirectoryDsc

                         Import-DscResource -Module PSDesiredStateConfiguration
                         Import-DscResource -Module ComputerManagementDsc
                         Import-DscResource -Module ActiveDirectoryDsc


                         Node localhost {
                             ADComputer RemoveDomain {
                                 ComputerName = $MachineName
                                 Ensure = 'Absent'
                                 Credential = $Credentials
                             }
                         }
                     }

                     RemoveDomain -OutputPath 'C:\AWSQuickstart\RemoveDomain' -ConfigurationData $ConfigurationData
                     Start-DscConfiguration 'C:\AWSQuickstart\RemoveDomain' -Wait -Verbose -Force
          - name: CFNSignalEnd
            action: aws:branch
            inputs:
              Choices:
              - NextStep: signalsuccess
                Not:
                  Variable: "{{StackName}}"
                  StringEquals: ""
              - NextStep: sleepend
                Variable: "{{StackName}}"
                StringEquals: ""
          - name: "signalsuccess"
            action: "aws:executeAwsApi"
            nextStep: "terminateconfigurator"
            inputs:
              Service: cloudformation
              Api: SignalResource
              LogicalResourceId: "SSMWaitCondition"
              StackName: "{{StackName}}"
              Status: SUCCESS
              UniqueId: "SSMWaitCondition"
          - name: "sleepend"
            action: "aws:sleep"
            nextStep: "terminateconfigurator"
            inputs:
              Duration: PT1S
          - name: "signalfailure"
            action: "aws:executeAwsApi"
            onFailure: "step:terminateconfigurator"
            nextStep: "terminateconfigurator"
            inputs:
              Service: cloudformation
              Api: SignalResource
              LogicalResourceId: "SSMWaitCondition"
              StackName: "{{StackName}}"
              Status: FAILURE
              UniqueId: "SSMWaitCondition"
          - name: "terminateconfigurator"
            action: aws:changeInstanceState
            isEnd: true
            inputs:
              InstanceIds:
                - "{{launchInstance.InstanceIds}}"
              DesiredState: terminated
Outputs:
  GMSAConfigurationDocName:
    Value: !Ref GMSAConfigurationDoc
