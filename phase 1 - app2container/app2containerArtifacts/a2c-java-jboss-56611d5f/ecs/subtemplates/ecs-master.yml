AWSTemplateFormatVersion: 2010-09-09
Description: Deploys an application into an ECS Cluster

Metadata:
  AWS::CloudFormation::Interface:
    - Label:
        default: App Service Parameters for the application being deployed, check ecs-lb-webapp.yml for usage.
      Parameters:
        - AppName
        - ContainerImage
        - ContainerPort
        - RulePath
        - TaskCPU
        - TaskMemory
        - TaskCount
        - LogRetention
        - HealthCheckPath
        - HealthCheckCommand
    - Label:
        default: Logging Parameters for the application being deployed, check ecs-lb-webapp.yml for usage
      Parameters:
        - TaskLogDriver
        - MultipleDests
        - SingleDestName
        - IncludePattern
        - LogGrpName
        - LogStrmName
        - AutoCrtGrp
        - FirehoseStream
        - KinesisStream
        - KinesisAppendNewline
        - FirelensName
        - FirelensImage
        - ConfigType
        - ConfigPath
        - UsingCloudwatchLogs
        - UsingFirehoseLogs
        - UsingKinesisLogs
    - Label:
        default: Parameters for the infrastructure the app will be deployed to, including VPC, subnets, ECS Cluster, etc. Check ecs-cluster.yml, ecs-public-load-balancer.yml, and ecs-vpc.yml for usage.
      Parameters:
        - LaunchType
        - VpcCIDR
        - PublicSubnet1CIDR
        - PublicSubnet2CIDR
        - PrivateSubnet1CIDR
        - PrivateSubnet2CIDR
        - IncludePublicLoadBalancer
        - HealthCheckIntervalSeconds
        - HealthyThresholdCount
        - HealthCheckTimeoutSeconds
        - MaxSize
        - DesiredCapacity
        - AmiId
        - InstanceType
        - KeyName
    - Label:
        default: Parameters pertaining to S3 bucketing for subtemplates referenced in this master template
      Parameters:
        - S3Bucket
        - S3Region
        - S3KeyPrefix
    - Label:
        default: Existing resources to import rather than creating them in this template.
      Parameters:
        - VpcId
        - PublicSubnets
        - ClusterId

Parameters:
  # Active Directory Domain Configuration
  DomainSecretsArn:
    Type: "String"
    Default: "{{.AD.DomainSecretsArn}}"
    Description: "The Secrets Manager name or ARN that represents domain credentials to perform all needed domain actions."
  DomainDNSName:
    Type: String
    Default: "{{.AD.DomainDNSName}}"
    Description: Fully qualified domain name (FQDN).
    MaxLength: '255'
  DomainNetBIOSName:
    Type: String
    Default: "{{.AD.DomainNetBIOSName}}"
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows.
    MaxLength: '15'
  CreateGMSA:
    Type: String
    AllowedValues: [ true, false ]
    Default: {{.AD.CreateGMSA}}
  GMSAName:
    Type: String
    Default: "{{.AD.GMSAName}}"
    Description: The Group Managed Service Account to be used with this stack, this will create an AD Group of the same name.
    MaxLength: '25'

  # App Service Parameters for the application being deployed
  AppName:
    Type: String
    Default: {{.App.AppName}}
  ContainerImage:
    Type: String
    Default: {{.App.ContainerImage}}
  ContainerPort:
    Type: Number
    Default: {{.App.ContainerPort}}
  RulePath:
    Type: String
    Default: '{{.App.RulePath}}'
  TaskCPU:
    Type: String
    Default: '{{.App.TaskCPU}}'
  TaskMemory:
    Type: String
    Default: '{{.App.TaskMemory}}'
  TaskCount:
    Type: Number
    Default: 1
  LogRetention:
    Type: Number
    Default: 30
  HealthCheckPath:
    Type: String
    Default: '{{.App.HealthCheckPath}}'
  HealthCheckCommand:
    Type: String
    Default: ""

  # Firelens Parameters for the application being deployed
  TaskLogDriver:
    Type: String
    Default: {{.Log.TaskLogDriver}}
  MultipleDests:
    Type: String
    AllowedValues: [true, false]
    Default: {{.Log.MultipleDests}}
  SingleDestName:
    Type: String
    Default: {{.Log.SingleDestName}}
  IncludePattern:
    Type: String
    Default: {{.Log.IncludePattern}}
  LogGrpName:
    Type: String
    Default: {{.Log.LogGrpName}}
  LogStrmName:
    Type: String
    Default: {{.Log.LogStrmName}}
  AutoCrtGrp:
    Type: String
    Default: {{.Log.AutoCrtGrp}}
  FirehoseStream:
    Type: String
    Default: {{.Log.FirehoseStream}}
  KinesisStream:
    Type: String
    Default: {{.Log.KinesisStream}}
  KinesisAppendNewline:
    Type: String
    Default: {{.Log.KinesisAppendNewline}}
  FirelensName:
    Type: String
    Default: {{.Log.FirelensName}}
  FirelensImage:
    Type: String
    Default: {{.Log.FirelensImage}}
  ConfigType:
    Type: String
    Default: {{.Log.ConfigType}}
  ConfigPath:
    Type: String
    Default: {{.Log.ConfigPath}}
  UsingCloudwatchLogs:
    Type: String
    Default: {{.Log.UsingCloudwatchLogs}}
  UsingFirehoseLogs:
    Type: String
    Default: {{.Log.UsingFirehoseLogs}}
  UsingKinesisLogs:
    Type: String
    Default: {{.Log.UsingKinesisLogs}}

  # Infrastructure-related Parameters that the app will be deployed to, consists of VPC, ECS Cluster, etc.
  LaunchType:
    Type: String
    Default: {{.Env.LaunchType}}
    AllowedValues: [ FARGATE, EC2 ]
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.3.0/24
  IncludePublicLoadBalancer:
    Type: String
    Default: {{.Env.IncludePublicLB}}
    AllowedValues: [ true, false ]

  # Health Check Parameters for Target Groups
  HealthCheckIntervalSeconds:
    Type: Number
    Default: {{.Env.Health.HealthCheckIntervalSeconds}}
  HealthyThresholdCount:
    Type: Number
    Default: {{.Env.Health.HealthyThresholdCount}}
  HealthCheckTimeoutSeconds:
    Type: Number
    Default: {{.Env.Health.HealthCheckTimeoutSeconds}}

  # Parameters for the Application Load Balanced EC2 launch type
  MaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of EC2 instances that can be launched in your ECS Cluster.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  AmiId:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<String>
    Default: {{.Env.ClusterAMI}}
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: c4.4xlarge
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
                    m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
                    c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
                    c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
                    r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge, c5.4xlarge, c5.9xlarge,
                    c5.12xlarge, c5.18xlarge, c5.24xlarge, c5a.4xlarge, c5a.8xlarge, c5a.12xlarge, c5a.16xlarge,
                    c5a.24xlarge, c5ad.4xlarge, c5ad.8xlarge, c5ad.12xlarge, c5ad.16xlarge, c5ad.24xlarge,
                    c5d.4xlarge, c5d.9xlarge, c5d.12xlarge, c5d.18xlarge, c5d.24xlarge, c5n.4xlarge, c5n.9xlarge, c5n.18xlarge,
                    c6g.4xlarge, c6g.8xlarge, c6g.12xlarge, c6g.16xlarge, c6gd.4xlarge, c6gd.8xlarge, c6gd.12xlarge, c6gd.16xlarge,
                    c6gn.4xlarge, c6gn.8xlarge, c6gn.12xlarge, c6gn.16xlarge, d3.4xlarge, d3.8xlarge, d3en.4xlarge,
                    d3en.6xlarge, d3en.8xlarge, d3en.12xlarge, i3en.6xlarge, i3en.12xlarge, i3en.24xlarge, inf1.6xlarge, inf1.24xlarge,
                    m5.4xlarge, m5.8xlarge, m5.12xlarge, m5.16xlarge, m5.24xlarge, m5a.4xlarge, m5a.8xlarge, m5a.12xlarge, m5a.16xlarge,
                    m5a.24xlarge, m5ad.4xlarge, m5ad.8xlarge, m5ad.12xlarge, m5ad.16xlarge, m5ad.24xlarge, m5d.4xlarge, m5d.8xlarge,
                    m5d.12xlarge, m5d.16xlarge, m5d.24xlarge, m5dn.4xlarge, m5dn.8xlarge, m5dn.12xlarge, m5dn.16xlarge, m5dn.24xlarge,
                    m5n.4xlarge, m5n.8xlarge, m5n.12xlarge, m5n.16xlarge. m5n.24xlarge, m5zn.6xlarge, m5zn.12xlarge,
                    m6g.4xlarge, m6g.8xlarge, m6g.12xlarge, m6g.16xlarge, m6gd.4xlarge, m6gd.8xlarge, m6gd.12xlarge, m6gd.16xlarge,
                    r5.4xlarge, r5.8xlarge, r5.12xlarge, r5.16xlarge, r5.24xlarge, r5a.4xlarge, r5a.8xlarge, r5a.12xlarge, r5a.16xlarge,
                    r5a.24xlarge, r5ad.4xlarge, r5ad.8xlarge, r5ad.12xlarge, r5ad.16xlarge, r5ad.24xlarge, r5b.4xlarge,
                    r5b.8xlarge, r5b.12xlarge, r5b.16xlarge, r5b.24xlarge, r5d.4xlarge, r5d.8xlarge, r5d.12xlarge, r5d.16xlarge,
                    r5d.24xlarge, r5dn.4xlarge, r5dn.8xlarge, r5dn.12xlarge, r5dn.16xlarge, r5dn.24xlarge, r5n.4xlarge,
                    r5n.8xlarge, r5n.12xlarge, r5n.16xlarge, r5n.24xlarge,r6g.4xlarge, r6g.8xlarge, r6g.12xlarge, r6g.16xlarge,
                    r6gd.4xlarge, r6gd.8xlarge, r6gd.12xlarge, r6gd.16xlarge, z1d.6xlarge, z1d.12xlarge]
    ConstraintDescription: Please choose a valid instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: String
    Default: "{{.Env.KeyPairName}}"
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  # Following parameters pertain to S3 bucketing for subtemplates
  S3Bucket:
    Type: String
    Default: {{.S3.S3Bucket}}
  S3Region:
    Type: String
    Default: {{.S3.S3Region}}
  S3KeyPrefix:
    Type: String
    Default: {{.S3.S3KeyPrefix}}

  # Only edit these parameters if you're importing resources created outside of a CLI-generated CloudFormation template.
  # If you need GMSA setup, AD needs to be setup already and these parameters should be filled and represent AD's VPC.
  # If you pass in a VPC, you must also pass in the subnets as a comma separated list of strings.
  VpcId:
    Type: String
    Default: "{{.Env.VpcId}}"
  PublicSubnets:
    Type: CommaDelimitedList
    Default: "{{.Env.PublicSubnets}}"
  ClusterId:
    Type: String
    Default: ""

  # When a CfnStackNamePrefix from a previous application's master template is being reused, this should be non empty
  CfnStackNamePrefix:
    Type: String
    Default: "{{.Env.CfnStackName}}"

  # Should be a valid already provisioned or imported ACM certificate to associate to the application load balancer
  ACMCertificateArn:
    Type: String
    Default: "{{.Env.ACMCertArn}}"

Rules:
  FirelensSingleCloudwatch:
    RuleCondition: !And
      - !Equals [ !Ref MultipleDests, 'false']
      - !Equals [ !Ref UsingCloudwatchLogs, 'true']
    Assertions:
      - AssertDescription: You cannot use any other firelens destination if a single cloudwatch stream is desired
        Assert: !And
          - !Equals [ !Ref UsingFirehoseLogs, 'false']
          - !Equals [ !Ref UsingKinesisLogs, 'false']
          - !Equals [ !Ref SingleDestName, "cloudwatch" ]
          - !Not [ !Equals [ !Ref LogGrpName, "" ]]
          - !Not [ !Equals [ !Ref LogStrmName, "" ]]
          - !Not [ !Equals [ !Ref AutoCrtGrp, "" ]]
  FirelensSingleFirehose:
    RuleCondition: !And
      - !Equals [ !Ref MultipleDests, 'false']
      - !Equals [ !Ref UsingFirehoseLogs, 'true']
    Assertions:
      - AssertDescription: You cannot use any other firelens destination if a single firehose stream is desired
        Assert: !And
          - !Equals [ !Ref UsingCloudwatchLogs, 'false']
          - !Equals [ !Ref UsingKinesisLogs, 'false']
          - !Equals [ !Ref SingleDestName, "firehose" ]
          - !Not [ !Equals [ !Ref FirehoseStream, "" ]]
  FirelensSingleKinesis:
    RuleCondition: !And
      - !Equals [ !Ref MultipleDests, 'false']
      - !Equals [ !Ref UsingKinesisLogs, 'true']
    Assertions:
      - AssertDescription: You cannot use any other firelens destination if a single kinesis stream is desired
        Assert: !And
          - !Equals [ !Ref UsingCloudwatchLogs, 'false']
          - !Equals [ !Ref UsingFirehoseLogs, 'false']
          - !Equals [ !Ref SingleDestName, "kinesis" ]
          - !Not [ !Equals [ !Ref KinesisStream, "" ]]
          - !Not [ !Equals [ !Ref KinesisAppendNewline, "" ]]
  MultipleDestinations:
    RuleCondition: !Equals [ !Ref MultipleDests, 'true']
    Assertions:
      - AssertDescription: You must supply a configuration file location and filepath if multiple firelens destinations are being used
        Assert: !And
          - !Not [ !Equals [ !Ref ConfigType, "" ] ]
          - !Not [ !Equals [ !Ref ConfigPath, "" ] ]
          - !Equals [ !Ref SingleDestName, ""]
          - !Equals [ !Ref IncludePattern, ""]
          - !Equals [ !Ref LogGrpName, ""]
          - !Equals [ !Ref LogStrmName, ""]
          - !Equals [ !Ref AutoCrtGrp, ""]
          - !Equals [ !Ref FirehoseStream, ""]
          - !Equals [ !Ref KinesisStream, ""]
          - !Equals [ !Ref KinesisAppendNewline, ""]
  UsingCWLogsForWindows:
    RuleCondition: !Equals [ !Ref TaskLogDriver, "awslogs"]
    Assertions:
      - AssertDescription: You cannot supply any linux-only firelens parameters if you are using cloudwatch logs for a .NET Application
        Assert: !And
          - !Equals [ !Ref ConfigType, "" ]
          - !Equals [ !Ref ConfigPath, "" ]
          - !Equals [ !Ref SingleDestName, ""]
          - !Equals [ !Ref IncludePattern, ""]
          - !Equals [ !Ref LogGrpName, ""]
          - !Equals [ !Ref LogStrmName, ""]
          - !Equals [ !Ref AutoCrtGrp, ""]
          - !Equals [ !Ref FirehoseStream, ""]
          - !Equals [ !Ref KinesisStream, ""]
          - !Equals [ !Ref KinesisAppendNewline, ""]

Conditions:
  CreatePublicLoadBalancer:
    !Equals [ !Ref IncludePublicLoadBalancer, true ]
  DoNotCreatePublicLoadBalancer:
    !Not
    - !Condition CreatePublicLoadBalancer
  ImportCert:
    !Not [!Equals [ !Ref ACMCertificateArn, "" ]]

  ImportExternalVpc:
    !Not [!Equals [!Ref VpcId, ""]]
  ImportExternalCluster:
    !Not [!Equals [!Ref ClusterId, ""]]
  CreateNewVpc:
    !And [!Not [Condition: ImportExternalVpc], Condition: CreateNewEnv]
  CreateNewCluster:
    !And [!Not [Condition: ImportExternalCluster], Condition: CreateNewEnv]
  CreateNewEnv:
    !Equals [ !Ref CfnStackNamePrefix, "" ]

  CreateServiceAccount:
    !Equals [ !Ref CreateGMSA, true ]
  UseServiceAccount:
    !Not [!Equals [ !Ref GMSAName, "" ]]

Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateNewVpc
    Properties:
      TemplateURL: !Sub 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}/ecs-vpc.yml'
      Tags:
        - Key: "a2c-generated"
          Value: !Sub 'ecs-vpc-${AWS::StackName}'
          {{- range $val := .StackTags}}
        - Key: "{{$val.Key}}"
          Value: "{{$val.Value}}"
          {{- end}}
      Parameters:
        MasterStackName: !Ref AWS::StackName
        VpcCIDR: !Ref VpcCIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PrivateSubnet1CIDR: !Ref PrivateSubnet1CIDR
        PrivateSubnet2CIDR: !Ref PrivateSubnet2CIDR

  ALBStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateNewEnv
    Properties:
      TemplateURL: !Sub 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}/ecs-public-load-balancer.yml'
      Tags:
        - Key: "a2c-generated"
          Value: !Sub 'ecs-alb-${AWS::StackName}'
          {{- range $val := .StackTags}}
        - Key: "{{$val.Key}}"
          Value: "{{$val.Value}}"
          {{- end}}
      Parameters:
        MasterStackName: !Ref AWS::StackName
        IncludePublicLoadBalancer: !Ref IncludePublicLoadBalancer
        ACMCertificateArn: !Ref ACMCertificateArn
        VpcId:
          !If
          - ImportExternalVpc
          - !Ref VpcId
          - !GetAtt VPCStack.Outputs.VpcId
        PublicSubnets:
          !If
          - ImportExternalVpc
          - !Join [ ',', !Ref PublicSubnets ]
          - !GetAtt VPCStack.Outputs.PublicSubnets
        HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
        HealthyThresholdCount: !Ref HealthyThresholdCount
        HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds

  gMSASetupStack:
    Type: AWS::CloudFormation::Stack
    Condition: UseServiceAccount
    Properties:
      TemplateURL: !Sub 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}/ecs-gmsa.yml'
      Tags:
        - Key: "a2c-generated"
          Value: !Sub 'ecs-gmsa-${AWS::StackName}'
          {{- range $val := .StackTags}}
        - Key: "{{$val.Key}}"
          Value: "{{$val.Value}}"
          {{- end}}
      Parameters:
        Subnets:
          !If
          - ImportExternalVpc
          - !Join [ ',', !Ref PublicSubnets ]
          - !If
            - CreateNewEnv
            - !GetAtt VPCStack.Outputs.PublicSubnets
            - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-PublicSubnets'
        DomainDNSName: !Ref DomainDNSName
        DomainNetBIOSName: !Ref DomainNetBIOSName
        DomainSecretsArn: !Ref DomainSecretsArn
        DomainMemberSGID:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.EnvironmentSecurityGroup
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-EnvironmentSecurityGroup'
        CreateGMSA: !Ref CreateGMSA
        GMSAName: !Ref GMSAName
        S3Bucket: !Ref S3Bucket
        S3Region: !Ref S3Region
        S3KeyPrefix: !Ref S3KeyPrefix

  ClusterStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateNewCluster
    Properties:
      TemplateURL: !Sub 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}/ecs-cluster.yml'
      Tags:
        - Key: "a2c-generated"
          Value: !Sub 'ecs-cluster-${AWS::StackName}'
          {{- range $val := .StackTags}}
        - Key: "{{$val.Key}}"
          Value: "{{$val.Value}}"
          {{- end}}
      Parameters:
        MasterStackName: !Ref AWS::StackName
        LaunchType: !Ref LaunchType
        PublicSubnets:
          !If
          - ImportExternalVpc
          - !Join [ ',', !Ref PublicSubnets ]
          - !If
            - CreateNewEnv
            - !GetAtt VPCStack.Outputs.PublicSubnets
            - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-PublicSubnets'
        EnvironmentSecurityGroup:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.EnvironmentSecurityGroup
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-EnvironmentSecurityGroup'
        MaxSize: !Ref MaxSize
        DesiredCapacity: !Ref DesiredCapacity
        AmiId: !Ref AmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        ECSArtifactBucket: !Ref S3Bucket
        DomainDNSName: !Ref DomainDNSName
        DomainNetBIOSName: !Ref DomainNetBIOSName
        DomainSecretsArn: !Ref DomainSecretsArn
        GroupManagedServiceAccountName: !Ref GMSAName
        WriteMOFFunctionLambdaArn:
          !If
          - UseServiceAccount
          - !GetAtt gMSASetupStack.Outputs.WriteMOFFunctionLambdaArn
          - !Ref "AWS::NoValue"

  PrivateAppStack:
    Type: AWS::CloudFormation::Stack
    Condition: DoNotCreatePublicLoadBalancer
    Properties:
      TemplateURL: !Sub 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}/ecs-private-app.yml'
      Tags:
        - Key: "a2c-generated"
          Value: !Sub 'ecs-app-${AWS::StackName}'
          {{- range $val := .StackTags}}
        - Key: "{{$val.Key}}"
          Value: "{{$val.Value}}"
          {{- end}}
      Parameters:
        MasterStackName: !Ref AWS::StackName
        LaunchType: !Ref LaunchType
        AppName: !Ref AppName
        ContainerImage: !Ref ContainerImage
        ContainerPort: !Ref ContainerPort
        TaskCPU: !Ref TaskCPU
        TaskMemory: !Ref TaskMemory
        TaskCount: !Ref TaskCount
        GMSAName: !Ref GMSAName
        CredSpecBucket: !Ref S3Bucket
        CredSpecKey: !Sub 'CredSpecs/${GMSAName}.json'
        LogRetention: !Ref LogRetention
        HealthCheckCommand: !Ref HealthCheckCommand
        TaskLogDriver: !Ref TaskLogDriver
        MultipleDests: !Ref MultipleDests
        SingleDestName: !Ref SingleDestName
        IncludePattern: !Ref IncludePattern
        LogGrpName: !Ref LogGrpName
        LogStrmName: !Ref LogStrmName
        AutoCrtGrp: !Ref AutoCrtGrp
        FirehoseStream: !Ref FirehoseStream
        KinesisStream: !Ref KinesisStream
        KinesisAppendNewline: !Ref KinesisAppendNewline
        FirelensName: !Ref FirelensName
        FirelensImage: !Ref FirelensImage
        ConfigType: !Ref ConfigType
        ConfigPath: !Ref ConfigPath
        UsingCloudwatchLogs: !Ref UsingCloudwatchLogs
        UsingFirehoseLogs: !Ref UsingFirehoseLogs
        UsingKinesisLogs: !Ref UsingKinesisLogs
        PublicSubnets:
          !If
          - ImportExternalVpc
          - !Join [ ',', !Ref PublicSubnets ]
          - !If
            - CreateNewEnv
            - !GetAtt VPCStack.Outputs.PublicSubnets
            - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-PublicSubnets'
        ServiceDiscoveryNamespaceID:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.ServiceDiscoveryNamespaceID
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-ServiceDiscoveryNamespaceID'
        EnvironmentSecurityGroup:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.EnvironmentSecurityGroup
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-EnvironmentSecurityGroup'
        ClusterId:
          !If
          - ImportExternalCluster
          - !Ref ClusterId
          - !If
            - CreateNewEnv
            - !GetAtt ClusterStack.Outputs.ClusterId
            - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-ClusterId'

  LBWebAppStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreatePublicLoadBalancer
    Properties:
      TemplateURL: !Sub 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}/ecs-lb-webapp.yml'
      Tags:
        - Key: "a2c-generated"
          Value: !Sub 'ecs-app-${AWS::StackName}'
          {{- range $val := .StackTags}}
        - Key: "{{$val.Key}}"
          Value: "{{$val.Value}}"
          {{- end}}
      Parameters:
        MasterStackName: !Ref AWS::StackName
        LaunchType: !Ref LaunchType
        AppName: !Ref AppName
        ContainerImage: !Ref ContainerImage
        ContainerPort: !Ref ContainerPort
        RulePath: !Ref RulePath
        TaskCPU: !Ref TaskCPU
        TaskMemory: !Ref TaskMemory
        TaskCount: !Ref TaskCount
        GMSAName: !Ref GMSAName
        CredSpecBucket: !Ref S3Bucket
        CredSpecKey: !Sub 'CredSpecs/${GMSAName}.json'
        LogRetention: !Ref LogRetention
        HealthCheckPath: !Ref HealthCheckPath
        HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
        HealthyThresholdCount: !Ref HealthyThresholdCount
        HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds
        TaskLogDriver: !Ref TaskLogDriver
        MultipleDests: !Ref MultipleDests
        SingleDestName: !Ref SingleDestName
        IncludePattern: !Ref IncludePattern
        LogGrpName: !Ref LogGrpName
        LogStrmName: !Ref LogStrmName
        AutoCrtGrp: !Ref AutoCrtGrp
        FirehoseStream: !Ref FirehoseStream
        KinesisStream: !Ref KinesisStream
        KinesisAppendNewline: !Ref KinesisAppendNewline
        FirelensName: !Ref FirelensName
        FirelensImage: !Ref FirelensImage
        ConfigType: !Ref ConfigType
        ConfigPath: !Ref ConfigPath
        UsingCloudwatchLogs: !Ref UsingCloudwatchLogs
        UsingFirehoseLogs: !Ref UsingFirehoseLogs
        UsingKinesisLogs: !Ref UsingKinesisLogs
        VpcId:
          !If
          - ImportExternalVpc
          - !Ref VpcId
          - !If
            - CreateNewEnv
            - !GetAtt VPCStack.Outputs.VpcId
            - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-VpcId'
        PublicSubnets:
          !If
          - ImportExternalVpc
          - !Join [ ',', !Ref PublicSubnets ]
          - !If
            - CreateNewEnv
            - !GetAtt VPCStack.Outputs.PublicSubnets
            - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-PublicSubnets'
        ServiceDiscoveryNamespaceID:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.ServiceDiscoveryNamespaceID
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-ServiceDiscoveryNamespaceID'
        EnvironmentSecurityGroup:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.EnvironmentSecurityGroup
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-EnvironmentSecurityGroup'
        PublicLoadBalancerDNSName:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.PublicLoadBalancerDNSName
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-PublicLoadBalancerDNS'
        PublicLoadBalancerHostedZone:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.PublicLoadBalancerHostedZone
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-CanonicalHostedZoneID'
        HTTPListenerArn:
          !If
          - CreateNewEnv
          - !GetAtt ALBStack.Outputs.HTTPListenerArn
          - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-HTTPListenerArn'
        HTTPSListenerArn:
          !If
          - ImportCert
          - !If
            - CreateNewEnv
            - !GetAtt ALBStack.Outputs.HTTPSListenerArn
            - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-HTTPSListenerArn'
          - ""
        ClusterId:
          !If
          - ImportExternalCluster
          - !Ref ClusterId
          - !If
            - CreateNewEnv
            - !GetAtt ClusterStack.Outputs.ClusterId
            - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-ClusterId'
        RulePriorityLambda: '{{.RulePriorityLambda}}'

Outputs:
  # Output so CLI can display LB URL to user
  PublicLoadBalancerDNSName:
    Condition: CreatePublicLoadBalancer
    Value:
      !If
      - CreateNewEnv
      - !GetAtt ALBStack.Outputs.PublicLoadBalancerDNSName
      - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-PublicLoadBalancerDNS'
    Export:
      Name: !Sub '${AWS::StackName}-PublicLoadBalancerDNSForCLIOutput'
  ClusterId:
    Value:
      !If
      - ImportExternalCluster
      - !Ref ClusterId
      - !If
        - CreateNewEnv
        - !GetAtt ClusterStack.Outputs.ClusterId
        - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-ClusterId'
    Export:
      Name: !Sub '${AWS::StackName}-ClusterIdOutput'
  ECSService:
    Value:
      !If
      - CreateNewEnv
      - !If
        - CreatePublicLoadBalancer
        - !GetAtt LBWebAppStack.Outputs.ECSService
        - !GetAtt PrivateAppStack.Outputs.ECSService
      - Fn::ImportValue: !Sub '${CfnStackNamePrefix}-ECSService'
    Export:
      Name: !Sub '${AWS::StackName}-ECSServiceOutput'
